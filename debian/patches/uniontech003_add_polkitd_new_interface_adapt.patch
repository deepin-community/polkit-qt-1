Index: polkit-qt-1/agent/polkitqt1-agent-session.cpp
===================================================================
--- polkit-qt-1-0.200.0.orig/agent/polkitqt1-agent-session.cpp
+++ polkit-qt-1-0.200.0/agent/polkitqt1-agent-session.cpp
@@ -6,10 +6,13 @@
 */
 
 #include "polkitqt1-agent-session.h"
-
-#include <QDebug>
+#include "polkitqt1-details.h"
 
 #include "polkitqt1-identity.h"
+#include <QDebug>
+#include <QList>
+#include <QStringList>
+#include <QString>
 
 #define POLKIT_AGENT_I_KNOW_API_IS_SUBJECT_TO_CHANGE 1
 #include <polkitagent/polkitagent.h>
@@ -26,6 +29,10 @@ public:
     static void request(PolkitAgentSession *s, gchar *request, gboolean echo_on, gpointer user_data);
     static void showError(PolkitAgentSession *s, gchar *text, gpointer user_data);
     static void showInfo(PolkitAgentSession *s, gchar *text, gpointer user_data);
+    static void exAuthStatus(PolkitAgentSession *s, int statusCode,
+                             int authFlags, gchar *msg, gpointer user_data);
+    static void exAuthInfo(PolkitAgentSession *s, int isMfa, gchar *authTypes,
+                           gpointer user_data);
 
     AsyncResult *result;
     PolkitAgentSession *polkitAgentSession;
@@ -41,11 +48,54 @@ Session::Session(const PolkitQt1::Identi
         , d(new Private)
 {
     d->result = result;
-    d->polkitAgentSession = polkit_agent_session_new(identity.identity(), cookie.toUtf8().data());
-    g_signal_connect(G_OBJECT(d->polkitAgentSession), "completed", G_CALLBACK(Private::completed), this);
-    g_signal_connect(G_OBJECT(d->polkitAgentSession), "request", G_CALLBACK(Private::request), this);
-    g_signal_connect(G_OBJECT(d->polkitAgentSession), "show-error", G_CALLBACK(Private::showError), this);
-    g_signal_connect(G_OBJECT(d->polkitAgentSession), "show-info", G_CALLBACK(Private::showInfo), this);
+    d->polkitAgentSession =
+        polkit_agent_session_new(identity.identity(), cookie.toUtf8().data());
+    g_signal_connect(G_OBJECT(d->polkitAgentSession), "completed",
+                     G_CALLBACK(Private::completed), this);
+    g_signal_connect(G_OBJECT(d->polkitAgentSession), "request",
+                     G_CALLBACK(Private::request), this);
+    g_signal_connect(G_OBJECT(d->polkitAgentSession), "show-error",
+                     G_CALLBACK(Private::showError), this);
+    g_signal_connect(G_OBJECT(d->polkitAgentSession), "show-info",
+                     G_CALLBACK(Private::showInfo), this);
+    g_signal_connect(G_OBJECT(d->polkitAgentSession), "status",
+                     G_CALLBACK(Private::exAuthStatus), this);
+    g_signal_connect(G_OBJECT(d->polkitAgentSession), "auth-info",
+                     G_CALLBACK(Private::exAuthInfo), this);
+}
+
+Session::Session(const PolkitQt1::Identity &identity, const QString &cookie,
+                 AsyncResult *result, const PolkitQt1::Details *details,
+                 QObject *parent)
+    : QObject(parent), d(new Private)
+{
+    d->result = result;
+
+    if (details)
+    {
+        d->polkitAgentSession = polkit_agent_session_new_ex(
+            identity.identity(), cookie.toUtf8().data(), details->details());
+    }
+    else
+    {
+        d->polkitAgentSession =
+            polkit_agent_session_new(identity.identity(), cookie.toUtf8().data());
+    }
+
+    g_signal_connect(G_OBJECT(d->polkitAgentSession), "completed",
+                     G_CALLBACK(Private::completed), this);
+    g_signal_connect(G_OBJECT(d->polkitAgentSession), "request",
+                     G_CALLBACK(Private::request), this);
+    g_signal_connect(G_OBJECT(d->polkitAgentSession), "show-error",
+                     G_CALLBACK(Private::showError), this);
+    g_signal_connect(G_OBJECT(d->polkitAgentSession), "show-info",
+                     G_CALLBACK(Private::showInfo), this);
+    g_signal_connect(G_OBJECT(d->polkitAgentSession), "show-info",
+                     G_CALLBACK(Private::showInfo), this);
+    g_signal_connect(G_OBJECT(d->polkitAgentSession), "status",
+                     G_CALLBACK(Private::exAuthStatus), this);
+    g_signal_connect(G_OBJECT(d->polkitAgentSession), "auth-info",
+                     G_CALLBACK(Private::exAuthInfo), this);
 }
 
 Session::Session(PolkitAgentSession *pkAgentSession, QObject *parent)
@@ -60,6 +110,10 @@ Session::Session(PolkitAgentSession *pkA
     g_signal_connect(G_OBJECT(d->polkitAgentSession), "request", G_CALLBACK(Private::request), this);
     g_signal_connect(G_OBJECT(d->polkitAgentSession), "show-error", G_CALLBACK(Private::showError), this);
     g_signal_connect(G_OBJECT(d->polkitAgentSession), "show-info", G_CALLBACK(Private::showInfo), this);
+    g_signal_connect(G_OBJECT(d->polkitAgentSession), "status",
+                     G_CALLBACK(Private::exAuthStatus), this);
+    g_signal_connect(G_OBJECT(d->polkitAgentSession), "auth-info",
+                     G_CALLBACK(Private::exAuthInfo), this);
 }
 
 Session::~Session()
@@ -80,6 +134,18 @@ void Session::setResponse(const QString
     polkit_agent_session_response(d->polkitAgentSession, response.toUtf8().data());
 }
 
+void Session::setResponseEx(int authFlags, const QString &response)
+{
+    polkit_agent_session_response_ex(d->polkitAgentSession, authFlags,
+                                     response.toUtf8().data());
+}
+
+void Session::authCtrl(auth_ctrl_t ctrl, int authFlags)
+{
+    polkit_agent_session_ctrl(d->polkitAgentSession, authFlags,
+                              session_ctrl_t(ctrl));
+}
+
 void Session::cancel()
 {
     polkit_agent_session_cancel(d->polkitAgentSession);
@@ -118,6 +184,36 @@ void Session::Private::showInfo(PolkitAg
     qDebug() << "showInfo";
     Q_EMIT((Session *)user_data)->showInfo(QString::fromUtf8(text));
 }
+void Session::Private::exAuthStatus(PolkitAgentSession *s, int statusCode,
+                                    int authFlags, gchar *msg,
+                                    gpointer user_data)
+{
+    qDebug() << "exAuthStatus";
+
+    Q_EMIT((Session *)user_data)
+        ->exAuthStatus(statusCode, authFlags, QString::fromUtf8(msg));
+}
+
+void Session::Private::exAuthInfo(PolkitAgentSession *s, int isMfa,
+                                  gchar *authTypes, gpointer user_data)
+{
+    qDebug() << "exAuthInfo";
+    QString strAuthTypes = QString::fromUtf8(authTypes);
+
+    QStringList strListAuthTypes =
+        strAuthTypes.split(QChar(','), Qt::SkipEmptyParts);
+
+    QList<int> intAuthTypes;
+    QList<QString>::iterator it = strListAuthTypes.begin();
+    for (; it != strListAuthTypes.end(); it++)
+    {
+        intAuthTypes.append((*it).toInt());
+    }
+
+    qDebug() << intAuthTypes;
+
+    Q_EMIT((Session *)user_data)->exAuthInfo(isMfa, intAuthTypes);
+}
 
 //
 
--- polkit-qt-1-0.200.0.orig/agent/polkitqt1-agent-session.h
+++ polkit-qt-1-0.200.0/agent/polkitqt1-agent-session.h
@@ -8,9 +8,13 @@
 #ifndef POLKITQT1_AGENT_SESSION_H
 #define POLKITQT1_AGENT_SESSION_H
 
-#include <QObject>
+#include "polkitqt1-details.h"
 #include "polkitqt1-identity.h"
 #include "polkitqt1-agent-export.h"
+#include <QList>
+#include <QObject>
+
+typedef enum { AUTH_START = 1, AUTH_CLOSE } auth_ctrl_t;
 
 typedef struct _GSimpleAsyncResult GSimpleAsyncResult;
 typedef struct _PolkitAgentSession PolkitAgentSession;
@@ -95,6 +99,12 @@ public:
      */
     explicit Session(PolkitAgentSession *pkAgentSession, QObject *parent = nullptr);
 
+
+    Session(const PolkitQt1::Identity &identity, const QString &cookie,
+            AsyncResult *result = 0, const PolkitQt1::Details *details = 0,
+            QObject *parent = 0);
+
+
     /**
      * Destroy authentication session.
      */
@@ -114,6 +124,15 @@ public:
      */
     void setResponse(const QString &response);
 
+    void setResponseEx(int authFlags, const QString &response);
+
+    /**
+     * control the authentication
+     *
+     * \param ctrl the control flag.
+     */
+    void authCtrl(auth_ctrl_t ctrl, int authFlags);
+
     /**
      * Cancel the authentication session.
      * This will emit the completed() signal.
@@ -161,6 +180,11 @@ Q_SIGNALS:
      */
     void showInfo(const QString &text);
 
+    void exAuthStatus(int statusCode, int authType, const QString &msg);
+
+    void exAuthInfo(bool isMfa, QList<int> &authTypes);
+
+
 private:
     class Private;
     Private * const d;
--- /dev/null
+++ polkit-qt-1-0.200.0/agent/polkitqt1-agent-session.h.orig
@@ -0,0 +1,168 @@
+/*
+    This file is part of the PolKit1-qt project
+    SPDX-FileCopyrightText: 2009 Radek Novacek <rnovacek@redhat.com>
+
+    SPDX-License-Identifier: LGPL-2.0-or-later
+*/
+
+#ifndef POLKITQT1_AGENT_SESSION_H
+#define POLKITQT1_AGENT_SESSION_H
+
+#include <QObject>
+#include "polkitqt1-identity.h"
+#include "polkitqt1-agent-export.h"
+
+typedef struct _GSimpleAsyncResult GSimpleAsyncResult;
+typedef struct _PolkitAgentSession PolkitAgentSession;
+
+namespace PolkitQt1
+{
+
+/**
+ * \namespace Agent Agent
+ *
+ * \brief Namespace wrapping Polkit-Qt Agent classes
+ *
+ * This namespace wraps all Polkit-Qt Agent classes.
+ */
+
+namespace Agent
+{
+
+/**
+ * \internal
+ * \brief Encapsulation of GSimpleAsyncResult to QObject class
+ */
+class POLKITQT1_AGENT_EXPORT AsyncResult
+{
+public:
+    explicit AsyncResult(GSimpleAsyncResult *result);
+    virtual ~AsyncResult();
+
+    /**
+     * \brief Mark the action that is tied to this result as completed.
+     */
+    void setCompleted();
+
+    /**
+     * \brief Sets an error for the asynchronous result.
+     * Method complete() must be called anyway.
+     *
+     * \param text text of the error message
+     */
+    void setError(const QString &text);
+
+private:
+    class Private;
+    Private * const d;
+};
+
+/**
+ * \class Session polkitqt1-agent-session.h Session
+ * \author Radek Novacek <rnovacek@redhat.com>
+ *
+ * This class is interface for interacting with native
+ * authentication system for obtaining authorizations.
+ *
+ */
+class POLKITQT1_AGENT_EXPORT Session : public QObject
+{
+    Q_OBJECT
+    Q_DISABLE_COPY(Session)
+public:
+    /**
+     * Create a new authentication session.
+     *
+     * \param identity The identity to authenticate
+     * \param cookie The cookie obtained from the PolicyKit daemon
+     * \param result Result of the authentication action. Must be finished using complete() method.
+     * \param parent
+     */
+    Session(const PolkitQt1::Identity& identity, const QString &cookie, AsyncResult *result = nullptr, QObject *parent = nullptr);
+
+    /**
+     * Create a new authentication session from PolkitAgentSession object
+     *
+     * \warning Use this only if you are completely aware of what are you doing!
+     *
+     * \param pkAgentSession PolkitAgentSession object
+     * \param parent
+     */
+    explicit Session(PolkitAgentSession *pkAgentSession, QObject *parent = nullptr);
+
+    /**
+     * Destroy authentication session.
+     */
+    ~Session() override;
+
+    /**
+     * Initiate the authentication session.
+     *
+     * Use cancel() to cancel the session.
+     */
+    void initiate();
+
+    /**
+     * Method for providing response to requests received via request signal.
+     *
+     * \param response Response from the user, typically a password
+     */
+    void setResponse(const QString &response);
+
+    /**
+     * Cancel the authentication session.
+     * This will emit the completed() signal.
+     */
+    void cancel();
+
+    /**
+     * Get AsyncResult that can be used to finish authentication operation
+     *
+     * \return AsyncResult object or NULL if it is not set
+     */
+    AsyncResult *result();
+
+Q_SIGNALS:
+    /**
+     * This signal will be emitted when the authentication
+     * polkitqt1-agent-session.has been completed or cancelled.
+     *
+     * \param gainedAuthorization \c True if authorization was successfully obtained.
+     */
+    void completed(bool gainedAuthorization);
+
+    /**
+     * This signal will be emitted when user is requested to answer a question.
+     *
+     * \param request The request to show the user, e.g. "name: " or "password: ".
+     * \param echo \c True if the response to the request SHOULD be echoed on the screen,
+     *             \c False if the response MUST NOT be echoed to the screen.
+     */
+    void request(const QString &request, bool echo);
+
+    /**
+     * This signal will be emitted when there is information
+     * related to an error condition to be displayed to the user.
+     *
+     * \param text An error string to display to the user.
+     */
+    void showError(const QString &text);
+
+    /**
+     * This signal will be emitted when there is information
+     * to be displayed to the user.
+     *
+     * \param text A string to be displayed to the user.
+     */
+    void showInfo(const QString &text);
+
+private:
+    class Private;
+    Private * const d;
+};
+
+}
+
+}
+
+#endif // SESSION_H
--- polkit-qt-1-0.200.0.orig/core/polkitqt1-details.cpp
+++ polkit-qt-1-0.200.0/core/polkitqt1-details.cpp
@@ -91,4 +91,9 @@ QStringList Details::keys() const
     return list;
 }
 
+PolkitDetails *Details::details() const 
+{ 
+    return d->polkitDetails; 
+}
+
 }
--- polkit-qt-1-0.200.0.orig/core/polkitqt1-details.h
+++ polkit-qt-1-0.200.0/core/polkitqt1-details.h
@@ -79,6 +79,9 @@ public:
      * \return List of all keys.
      */
     QStringList keys() const;
+
+    PolkitDetails *details() const;
+
 private:
     class Data;
     QExplicitlySharedDataPointer< Data > d;
--- /dev/null
+++ polkit-qt-1-0.200.0/core/polkitqt1-details.h.orig
@@ -0,0 +1,89 @@
+/*
+    This file is part of the Polkit-qt project
+    SPDX-FileCopyrightText: 2009 Radek Novacek <rnovacek@redhat.com>
+
+    SPDX-License-Identifier: LGPL-2.0-or-later
+*/
+
+#ifndef POLKITQT1_DETAILS_H
+#define POLKITQT1_DETAILS_H
+
+#include "polkitqt1-core-export.h"
+
+#include <QObject>
+#include <QSharedData>
+
+typedef struct _PolkitDetails PolkitDetails;
+
+/**
+ * \namespace PolkitQt1 PolkitQt
+ *
+ * \brief Namespace wrapping Polkit-Qt classes
+ *
+ * This namespace wraps all Polkit-Qt classes.
+ */
+namespace PolkitQt1
+{
+
+/**
+ * \class Details polkitqt1-details.h Details
+ * \author Radek Novacek <rnovacek@redhat.com>
+ *
+ * \brief Class used for passing details around.
+ */
+class POLKITQT1_CORE_EXPORT Details
+{
+public:
+    /**
+     * Creates a new Details object
+     */
+    Details();
+
+    /**
+     * Creates Details object from PolkitDetails
+     *
+     * \warning Use this only if you are completely aware of what are you doing!
+     *
+     * \param pkDetails PolkitDetails object
+     */
+    explicit Details(PolkitDetails *pkDetails);
+
+    /**
+     * Copy constructor.
+     */
+    Details(const Details &other);
+
+    ~Details();
+
+    Details &operator=(const Details &other);
+
+    /**
+     * Get the value for \p key
+     *
+     * \param key A key
+     * \return Value of the key \p key, otherwise empty QString.
+     */
+    QString lookup(const QString &key) const;
+
+    /**
+     * Inserts key \p key with value \p value.
+     *
+     * \param key A key.
+     * \param value A value.
+     */
+    void insert(const QString &key, const QString &value);
+
+    /**
+     * Gets a list of all keys.
+     *
+     * \return List of all keys.
+     */
+    QStringList keys() const;
+private:
+    class Data;
+    QExplicitlySharedDataPointer< Data > d;
+};
+
+}
+
+#endif // DETAILS_H
